<apex:page id="thePage" standardcontroller="Opportunity" extensions="CreateBillingFromOpportunityExtension">
    <apex:includeScript value="{!URLFOR($Resource.AcctSeed__accounting_resources, '/javascript/jquery.min.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.AcctSeed__accounting_resources, '/javascript/bootstrap-tagsinput.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.AcctSeed__accounting_resources, '/javascript/accounting-common.js')}" />
    <apex:includeScript value="{!$Resource.ButtonsProcessing}" />
    <apex:stylesheet value="{!URLFOR($Resource.AcctSeed__accounting_resources, '/css/bootstrap-tagsinput.css')}" />
    
    <apex:form id="theForm">
        <apex:sectionHeader title="Opportunity" subtitle="{!Opportunity.Name}" />
        <apex:pageBlock id="thePageBlock" title="Create Billing">
            <apex:pageMessage severity="info" strength="3" 
                              summary="All items have been billed." rendered="{!AlreadyBilled}" />
            <apex:pageMessage severity="info" strength="3" 
                              summary="There are no Opportunity Products associated with this Opportunity." 
                              rendered="{!!isLines}" />
            <apex:pageMessage severity="info" strength="3" 
                              summary="You must include a value for the quantity to bill field for each line you want to include on the billing" 
                              rendered="{!isLines && !AlreadyBilled}" />
            <apex:pageMessages id="msg"></apex:pageMessages>
            <apex:pageBlockButtons >
                <apex:actionStatus id="saveStatus" onstart="AcctSeed.ASModule.disableButtons('Processing...')" 
                                   onstop="AcctSeed.ASModule.format()"/>
                <apex:commandButton status="saveStatus" value="Create Billing" action="{!createBilling}" 
                                    reRender="theForm" rendered="{!isLines && !AlreadyBilled}"/>
                <apex:commandButton value="Back" action="/{!Opportunity.Id}" immediate="true" />
            </apex:pageBlockButtons>
            <apex:pageBlockSection columns="2" rendered="{!isLines}">
                <apex:outputField value="{!Opportunity.AccountId}" />
                <apex:pageBlockSectionItem >
                    <apex:outputLabel value="Billing Date" />
                    <apex:InputField value="{!billingTemp.AcctSeed__Date__c}" />
                </apex:pageBlockSectionItem>
                <apex:pageBlockSectionItem >
                    <apex:outputLabel value="Ledger" />
                    <apex:outputlink value="/{!ledger.id}" >{!ledger.name}</apex:outputlink>
                </apex:pageBlockSectionItem>
                <apex:pageBlockSectionItem >
                    <apex:outputLabel value="Due Date" />
                    <apex:InputField value="{!billingTemp.AcctSeed__Due_Date2__c}" />
                </apex:pageBlockSectionItem>
                <apex:pageBlockSectionItem >
                    <apex:outputLabel value="Billing Format" />
                    <apex:inputfield value="{!billingTemp.AcctSeed__Billing_Format__c}" required="true"></apex:inputfield>
                </apex:pageBlockSectionItem>
                <apex:pageBlockSectionItem rendered="{!firstbilling}">
                    <apex:outputLabel value="Bill Deposit/All?:" />
                    <apex:selectList title="deposittypeselect" id="deposit" value="{!depositbill}" size="1" 
                                     styleClass="isdeposit" onchange="calculateBillOnload(true, this.title)">
                        <apex:selectOption itemValue="all" itemLabel="All" />
                        <apex:selectOption itemValue="deposit" itemLabel="Deposit" />
                    </apex:selectList>
                </apex:pageBlockSectionItem>
            </apex:pageBlockSection>
            
            <apex:pageBlockTable id="thePageBlockTable" value="{!OLIWrapper}" var="sow" 
                                 cellpadding="6" rendered="{!isLines}">
                <apex:column value="{!sow.oli.Product2.Name}" />
                <apex:column styleClass="align-right" headerClass="align-right" headerValue="Quantity Ordered">
                    <apex:outputText id="quantityOrdered" value="{0, number, 0.00000}">
                        <apex:param value="{!sow.oli.Quantity}" />
                    </apex:outputText>
                </apex:column>
                <apex:column styleClass="align-right" headerClass="align-right" headerValue="Quantity Billed">
                    <apex:outputText id="quantityBilled" value="{0, number, ####0.00000}" style="width:80px">
                        <apex:param value="{!sow.quantityBilled}" />
                    </apex:outputText>
                </apex:column>
                <apex:column styleClass="align-right" headerClass="align-right" headerValue="Quantity Unbilled">
                    <apex:outputText id="quantityUnbilled" value="{0, number, ####0.00000}">
                        <apex:param value="{!sow.oli.Quantity - sow.quantityBilled}" />
                    </apex:outputText>
                </apex:column>
                <apex:column styleClass="align-right" headerClass="align-right" style="width:120px">
                    <apex:facet name="header">
                        <apex:actionRegion >
                            Quantity to Bill
                            <br/>Bill Type?:&nbsp;
                            <apex:selectList title="billtypeselect" id="billAllSelect" value="{!billType}"
                                             size="1" onchange="calculateBillOnload(true, this.title)" styleClass="istype">
                                <apex:selectOption itemValue="percent" itemLabel="Percent" />
                                <apex:selectOption itemValue="quantity" itemLabel="Quantity" />
                                <apex:selectOption itemValue="amount" itemLabel="Amount" />
                            </apex:selectList>
                        </apex:actionRegion>
                    </apex:facet> 
                    <apex:actionRegion >
                        <apex:inputText id="billtype" title="myTitle" styleClass="align-right clearText billtypefilled" 
                                        value="{!sow.billTypeVal}" style="width:80px" 
                                        required="false" 
                                        onchange="recalculateBill(this.id, this.title,this.value, {!sow.UnbilledAmount}, {!sow.oli.UnitPrice}, {!sow.oli.Quantity}, {!sow.quantityBilled}, {!sow.oli.TotalPrice}, {!sow.billedAmount})"
                                        disabled="{!sow.quantityBilled == sow.oli.Quantity}">
                        </apex:inputText>
                    </apex:actionRegion>
                </apex:column>
                <apex:column styleClass="align-right" headerClass="align-right" headerValue="Billed Amount">
                    <apex:outputText id="billedAmount" value="{0, number, Currency}">
                        <apex:param value="{!sow.billedAmount}" />
                    </apex:outputText>
                </apex:column>
                <apex:column styleClass="align-right" headerClass="align-right" headerValue="Unbilled Amount">
                    <apex:outputText id="unbilledAmount" value="{0, number, Currency}">
                        <apex:param value="{!sow.unbilledAmount}" />
                    </apex:outputText>
                </apex:column>
                <apex:column styleClass="align-right" headerClass="align-right" headerValue="Unit Price">
                    <apex:outputText id="unit_price_cell" value="{0,number,$#,##0.00}">
                        <apex:param value="{!sow.oli.UnitPrice}" />
                    </apex:outputText>
                    <apex:inputHidden id="unitPriceCell" value="{!sow.oli.UnitPrice}"/>
                </apex:column>
                <apex:column styleClass="align-right" headerClass="align-right" headerValue="Total Price">
                    <apex:outputText id="total_price_cell" value="{0,number,$#,##0.00}">
                        <apex:param value="{!sow.oli.TotalPrice}" />
                    </apex:outputText>
                    <apex:inputHidden id="totalPriceCell" value="{!sow.oli.TotalPrice}"/>
                </apex:column>
                <apex:column styleClass="align-right" headerClass="align-right" footerClass="align-right" 
                             headerValue="Amount to Bill">
                    <apex:outputText id="billAmount" value="{0, number, Currency}" styleClass="clearAmount">
                        <apex:param value="{!sow.billAmount}" />
                    </apex:outputText>
                    <apex:inputHidden value="{!sow.BillAmountHidden}" id="billAmountInput" />
                    <apex:facet name="footer"> 
                        <apex:outputText id="footerAmount" value="{0, number, Currency}" styleClass="clearAmount">
                            <!-- <apex:param value="555" /> -->
                            <apex:param value="{!Amount}" />
                        </apex:outputText>
                    </apex:facet>
                </apex:column>                
            </apex:pageBlockTable>
        </apex:pageBlock>
    </apex:form>
    <script>
    var keyvalue = [];
    function calculateBillOnload(isOnChange, inputtype = ''){
        // selected
        var SelectedElement = document.getElementsByClassName('istype');
        var selected = SelectedElement[0].value;
        
        var TextInputs = document.getElementsByClassName('billtypefilled');

        if(isOnChange){
            var SelectedElementIsDeposit = document.getElementsByClassName('isdeposit');
            
            if(SelectedElementIsDeposit.length > 0){
                if(inputtype != ''){
                    var selectedisDeposit = SelectedElementIsDeposit[0].value;
                    if(inputtype == 'billtypeselect'){
                       if(selectedisDeposit == 'deposit'){
                            SelectedElementIsDeposit[0].value = 'all';
                       }  
                    }else if(inputtype == 'deposittypeselect'){
                        if(selectedisDeposit == 'deposit' && SelectedElement[0].value != 'percent'){
                            SelectedElement[0].value = 'percent';
                            selected = 'percent';
                        }
                    }
                
                }
            }
            //var selectedisDeposit = SelectedElementIsDeposit[0].value;

            for(var j = 0; j < TextInputs.length; j++){
                
                var tempId = TextInputs[j].id;
                
                var splittedTemp = tempId.split(':');
                var turnTemp = tempId.split(':')[4];
                
                var billtypeval = '';
                var quantityval = '';
                var quantityunbilled = '';
                var unBilledAmountTemp = '';
                var totalpricefield = '';
                
                for(var o = 0; o < 5; o++){
                    billtypeval += (o == 4)?turnTemp+':billtype':splittedTemp[o]+':';
                    quantityval += (o == 4)?turnTemp+':quantityUnbilled':splittedTemp[o]+':';
                    quantityunbilled += (o == 4)?turnTemp+':quantityUnbilled':splittedTemp[o]+':';
                    unBilledAmountTemp += (o == 4)?turnTemp+':unbilledAmount':splittedTemp[o]+':'; 
                    totalpricefield += (o == 4)?turnTemp+':total_price_cell':splittedTemp[o]+':';
                    
                }

                // if its quantity then set the full quantity in the billtypeVal input
                var unbilled = parseFloat(document.getElementById(quantityunbilled).innerHTML);
                var totalAmount = document.getElementById(totalpricefield).innerHTML.indexOf('(') != -1 ?
                                      -document.getElementById(totalpricefield).innerHTML.replace(/[()]/g, '').replace('$', '').replace(/,/g, '') : 
                                      document.getElementById(totalpricefield).innerHTML.replace('$', '').replace(/,/g, '');
                var unbilledAmount = document.getElementById(unBilledAmountTemp).innerHTML.indexOf('(') != -1 ?
                                      -document.getElementById(unBilledAmountTemp).innerHTML.replace(/[()]/g, '').replace('$', '').replace(/,/g, '') : 
                                      document.getElementById(unBilledAmountTemp).innerHTML.replace('$', '').replace(/,/g, '');
                
                var InitPercent = (unbilledAmount / totalAmount) * 100;
                
                var totalPercent = (totalAmount > 0) ? trueRound(InitPercent, 5): 100;

                if(selected == 'quantity'){
                    
                    // get the quantity
                    var quantity = parseFloat(document.getElementById(quantityval).innerHTML);
                    
                    // set the value
                    document.getElementById(billtypeval).value = (unbilled > 0) ? quantity : '';
                    
                }else if(selected == 'percent'){
                    var firstbillingStr = ('{!firstbilling}');
                    var firstbillings = (firstbillingStr == 'true');
                    var deposit = '{!deposit}';
                    
                    // check what the user has selected in the isdeposit select
                    document.getElementById(billtypeval).value = 
                        (unbilled > 0 && firstbillings && selectedisDeposit == 'deposit') ? deposit : ((unbilled > 0) ? totalPercent : '');
                    
                }else if(selected == 'amount'){
                    var unbilledamountTempVal = parseFloat(document.getElementById(unBilledAmountTemp).innerHTML.indexOf('(') != -1 ?
                                      -document.getElementById(unBilledAmountTemp).innerHTML.replace(/[()]/g, '').replace('$', '').replace(/,/g, '') : 
                                      document.getElementById(unBilledAmountTemp).innerHTML.replace('$', '').replace(/,/g, ''));
                    document.getElementById(billtypeval).value = (unbilled > 0) ? unbilledamountTempVal : '';
                }
            }
        }
        var FooterAmountIdStr = '';
        // calculate the bill amount and footer amount for the already populated percentages
        for(var i = 0; i < TextInputs.length; i++){
            
            // calcuate the ids of footer amount and bill amount so we can update their amounts based on billtype
            var id = TextInputs[i].id;
            var splitted = id.split(':');
            var turn = id.split(':')[4];
            
            var BillAmountIdStr = '';
            var BillAmountInputStr = '';
            var unitpricefield = '';
            var unBilledAmount = '';
            var totalpricecell = '';
            var BilledAmount = '';
            
            for(var k = 0; k < 5; k++){
                BillAmountIdStr += (k == 4)?turn+':billAmount':splitted[k]+':';
                BillAmountInputStr += (k == 4)?turn+':billAmountInput':splitted[k]+':';
                unBilledAmount += (k == 4)?turn+':unbilledAmount':splitted[k]+':';
                unitpricefield += (k == 4)?turn+':unit_price_cell':splitted[k]+':';
                totalpricecell += (k == 4)?turn+':total_price_cell':splitted[k]+':';
                BilledAmount += (k == 4)?turn+':billedAmount':splitted[k]+':';
                
            }
            if(i == 0){
                for(var x = 0; x < 5; x++){
                    
                    FooterAmountIdStr += (x == 4)?'footerAmount':splitted[x]+':';
                }
            }
            
            // entered
            var entered = (TextInputs[i].value == undefined) || (TextInputs[i].value == '') || 
                (TextInputs[i].value == null) ? 0 : parseFloat(TextInputs[i].value);
            var totalforActual = document.getElementById(totalpricecell).innerHTML.indexOf('(') != -1 ?
                                      -document.getElementById(totalpricecell).innerHTML.replace(/[()]/g, '').replace('$', '').replace(/,/g, '') : 
                                      document.getElementById(totalpricecell).innerHTML.replace('$', '').replace(/,/g, '');
            
            var UnBilledAmountStepOne = document.getElementById(unBilledAmount).innerHTML.indexOf('(') != -1 ?
                                      -document.getElementById(unBilledAmount).innerHTML.replace(/[()]/g, '').replace('$', '').replace(/,/g, '') : 
                                      document.getElementById(unBilledAmount).innerHTML.replace('$', '').replace(/,/g, '');
            
            var billedAmountValue = document.getElementById(BilledAmount).innerHTML.indexOf('(') != -1 ?
                                      -document.getElementById(BilledAmount).innerHTML.replace(/[()]/g, '').replace('$', '').replace(/,/g, '') : 
                                      document.getElementById(BilledAmount).innerHTML.replace('$', '').replace(/,/g, '');

            
            var UnitPriceStepOne = document.getElementById(unitpricefield).innerHTML.replace('$', '').replace(/,/g, '');
            
            // actual
            var forPercent = parseFloat(totalforActual);
            var forAmount = parseFloat(UnBilledAmountStepOne);
            
            // unitprice
            var unitprice = parseFloat(UnitPriceStepOne);
            
            // set the title for text field to be used with reCalculateBill
            TextInputs[i].attributes.getNamedItem('title').value = selected;
            
            var amount = 0;
            if(selected == 'percent'){
                amount = forPercent * (entered/100);
                let isFirstBill = '{!firstBilling}'
                if(amount.toString().includes('.') && entered < 100 && isFirstBill == 'true'){
                    amount = trueRound(amount, 2);

                    console.log('amount: ',amount)
                    // let arr = amount.toString().split('.')
                    // if(arr.length < 2) arr.push('0')
                    // console.log('amount.toString().split): ', arr)
                    let second_num_after_dot;
                    // let second_num_after_dot = arr[1][1] !== undefined && arr[1][1] !== null && arr[1][1] !== '' ? arr[1][1] : 0;
                    if(amount.toString().includes('.')){
                        second_num_after_dot = amount.toString().split('.')[1][1]
                    }else{
                        second_num_after_dot = 0
                    }
                    console.log('forAmount: ',forAmount)
                    console.log('second_num_after_dot MAIN: ',second_num_after_dot)
                    if(+second_num_after_dot % 2 !== 0 && second_num_after_dot){
                        // while(+second_num_after_dot % 2 !== 0){
                        //     amount = trueRound((forPercent * (entered/100)),2)
                        //     second_num_after_dot = amount.toString().split('.')[1][1]
                        //     entered -= 0.01
                        //     entered = entered.toFixed(2)
                        // }
                        TextInputs[i].value = entered;
                        //document.getElementById(id).value = entered;
                    }

                    // amount = trueRound(amount, 2);
                    // console.log(1)
                    // console.log(amount)
                    // let second_num_after_dot;

                    // if(amount.toString().includes('.')){
                    //     second_num_after_dot = amount.toString().split('.')[1][1]
                    // }else{
                    //     second_num_after_dot = 0
                    // }
                    // console.log(2)
                    // console.log('second_num_after_dot: '+second_num_after_dot)
                    // if(+second_num_after_dot % 2 !== 0){
                    //     while(+second_num_after_dot % 2 !== 0){
                    //         amount = trueRound((actual * (entered/100)),2)
                    //         second_num_after_dot = amount.toString().split('.')[1][1]
                    //         entered -= 0.01
                    //         entered = entered.toFixed(2)
                    //     }
                    //     document.getElementById(id).value = entered;
                    // }
                }
                
            }else if(selected == 'amount'){
                amount = forAmount;
            }else if(selected == 'quantity'){
                amount = entered * unitprice;
            }
            
            // amount = amount.toFixed(2);
            amount = trueRound(amount, 5);
            
            //amount = RectifyAmount(parseFloat(totalforActual), parseFloat(billedAmountValue), parseFloat(amount));
            
            // Bill amount
            
            document.getElementById(BillAmountIdStr).innerHTML = (amount == '') ? "$0.00" : 
                amount.toLocaleString('en-US', { style: 'currency', currency: 'USD' });
            document.getElementById(BillAmountInputStr).value = (amount == '') ? "0.00" : amount;
            
            // add it to the key value pair
            
            var ElementIndex = id.split(':')[4];
            keyvalue[ElementIndex] = amount;
            
        }
        
        console.log('keyvalue;'+keyvalue)
        // grand total
        var grandtotal = 0;
        for(var i = 0; i < keyvalue.length; i++){
            if(keyvalue[i] != undefined){
                grandtotal += parseFloat(keyvalue[i]);
                console.log('keyvalue['+i+']:' + keyvalue[i]);
            }
        }
        // grandtotal = 4444;
        var gt = trueRound(grandtotal, 5);
        document.getElementById(FooterAmountIdStr).innerHTML = 
            (grandtotal == 0) ? "$0.00" : gt.toLocaleString('en-US', { style: 'currency', currency: 'USD' });
    }
    
    window.onload = function(){
        
        var SelectedElementIsDeposit = document.getElementsByClassName('isdeposit');
        if(SelectedElementIsDeposit.length > 0){
            SelectedElementIsDeposit[0].value = 'all';
        }
        var SelectedElement = document.getElementsByClassName('istype');
        var val = SelectedElement[0].value;
        
        // clear each user entered amount/percent/quantity
        var TextInputs = document.getElementsByClassName('clearText');
        for(var i = 0; i < TextInputs.length; i++){
            //TextInputs[i].value = '';
            TextInputs[i].attributes.getNamedItem('title').value = val;
        }
        
        calculateBillOnload(false);
    }
    
    function recalculateBill(id,selected, entered, unbilledAmount, unitprice, 
                             quantityOrdered, quantityUnbilled, actual, billedAmount){
        var splitted = id.split(':');
        var turn = id.split(':')[4];
        
        var BillAmountIdStr = '';
        var BillAmountInputStr = '';
        
        for(var k = 0; k < 5; k++){
            BillAmountIdStr += (k == 4)?turn+':billAmount':splitted[k]+':';
            BillAmountInputStr += (k == 4)?turn+':billAmountInput':splitted[k]+':';
        }
        
        var FooterAmountIdStr = '';
        for(var x = 0; x < 5; x++){
            
            FooterAmountIdStr += (x == 4)?'footerAmount':splitted[x]+':';
        }
        
        var amount = 0;
        if(selected == 'percent'){
            amount = actual * (entered/100);
            if(entered < 0){
                alert('Percent cant be negative.')
                document.getElementById(id).value = '';
                amount = 0;
            }
            let isFirstBill = '{!firstBilling}'
            if(entered < 100 && entered > 0 && isFirstBill == 'true'){
                amount = trueRound(amount, 2);
                console.log(1)
                console.log(amount)
                let second_num_after_dot;

                if(amount.toString().includes('.')){
                    second_num_after_dot = amount.toString().split('.')[1][1]
                }else{
                    second_num_after_dot = 0
                }
                console.log(2)
                console.log('second_num_after_dot: '+second_num_after_dot)
                if(+second_num_after_dot % 2 !== 0){
                    while(+second_num_after_dot % 2 !== 0){
                        amount = trueRound((actual * (entered/100)),2)
                        second_num_after_dot = amount.toString().split('.')[1][1]
                        entered -= 0.01
                        entered = entered.toFixed(2)
                    }
                    document.getElementById(id).value = entered;
                }
            }
            
            if((actual < 0 && unbilledAmount > amount) || (actual > 0 && amount > unbilledAmount)){
                alert('For the entered percentage, the Amount to Bill cannot be more than the Unbilled Amount. Please enter a smaller percentage.');
                document.getElementById(id).value = '';
                amount = 0;
            }
        }else if(selected == 'amount'){
            if(actual.toString().indexOf('-') != -1 && entered > 0){ // if its negative amount
                alert('The amount cannot be more than 0.');
                document.getElementById(id).value = '';
            
            }else if(actual.toString().indexOf('-') != -1 && entered < actual){
                alert('The amount cannot be less than ' + actual.toFixed(2));
                document.getElementById(id).value = '';
            
            }else if(actual.toString().indexOf('-') < 0 && entered > actual){
                alert('The amount cannot be more than ' + actual.toFixed(2));
                document.getElementById(id).value = '';
            }else if(actual.toString().indexOf('-') < 0 && entered < 0){
                alert('The amount cannot be negative.');
                document.getElementById(id).value = '';
            }else{
                amount = (entered == undefined || entered == '' || entered == null) ? 0 : parseFloat(entered);
            }
        }else if(selected == 'quantity'){
            if(entered != '' && entered < 0){    
                alert('The quantity cannot be negative.');
                document.getElementById(id).value = '';
            }else if(entered > (quantityOrdered - quantityUnbilled)){
                alert('The quantity cannot be more than ' + (quantityOrdered - quantityUnbilled).toFixed(4));
                document.getElementById(id).value = '';
            }else{
                amount = entered * unitprice;
            }
        }
        
        // amount = amount.toFixed(2);
        amount = trueRound(amount, 5);
        
        //amount = RectifyAmount(parseFloat(actual), parseFloat(billedAmount), parseFloat(amount));

        // Bill amount
        document.getElementById(BillAmountIdStr).innerHTML = (amount == '') ? "$0.00" : 
        amount.toLocaleString('en-US', { style: 'currency', currency: 'USD' });
        // document.getElementById(BillAmountInputStr).value = (amount == '') ? "0.00" : '424242';
        document.getElementById(BillAmountInputStr).value = (amount == '') ? "0.00" : amount;
        
        // add it to the key value pair
        
        var ElementIndex = id.split(':')[4];
        keyvalue[ElementIndex] = amount;
        
        // grand total
        var grandtotal = 0;
        for(var i = 0; i < keyvalue.length; i++){
            if(keyvalue[i] != undefined){
                grandtotal += parseFloat(keyvalue[i]);
            }
        }
        
        var gtotal = trueRound(grandtotal, 5);
        document.getElementById(FooterAmountIdStr).innerHTML = 
            (grandtotal == 0) ? "$0.00" : gtotal.toLocaleString('en-US', { style: 'currency', currency: 'USD' });;
    }
    
    function trueRound(value, digits){
        return parseFloat((Math.round((value*Math.pow(10,digits)).toFixed(digits-1))/Math.pow(10,digits)).toFixed(digits));
    }
    
    function getLength(number) {
    return number.toString().length;
}
    
    function RectifyAmount(total, billed, amt){
        
        var difference = parseFloat(total > (billed + amt) ? total - (billed + amt) : (billed + amt) - total).toFixed(5);

        var assumedTotal = billed + amt;
        
        var correctAmount = 0;
        
        if(assumedTotal > total){
            
            correctAmount = amt - parseFloat(difference);
            
        }else{
        
            correctAmount = amt;
        }
        
        return correctAmount;
    
    }
    
    </script>
</apex:page>